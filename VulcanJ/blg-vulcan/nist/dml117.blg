Use CONNECT or CREATE DATABASE to specify a database
SET NAMES ASCII;
CREATE DATABASE 'test.fdb' DEFAULT CHARACTER SET ISO8859_1;

INPUT ddl/input/base-tab.sql;
 CREATE TABLE STAFF (EMPNUM CHAR(3) NOT NULL UNIQUE,EMPNAME CHAR(20), GRADE DECIMAL(4), CITY CHAR(15));
 CREATE TABLE STAFF1 (EMPNUM CHAR(3) NOT NULL, EMPNAME  CHAR(20), GRADE DECIMAL(4), CITY CHAR(15));
 CREATE TABLE STAFF3 (EMPNUM CHAR(3) NOT NULL , EMPNAME CHAR(20), GRADE DECIMAL(4), CITY CHAR(15), UNIQUE (EMPNUM));
 CREATE TABLE STAFF4 (EMPNUM CHAR(3) NOT NULL, EMPNAME CHAR(20), GRADE DECIMAL(4), CITY CHAR(15)); 
 
 CREATE TABLE PROJ (PNUM CHAR(3) NOT NULL UNIQUE, PNAME CHAR(20), PTYPE CHAR(6), BUDGET DECIMAL(9), CITY CHAR(15));
 CREATE TABLE PROJ1 (PNUM CHAR(3) NOT NULL UNIQUE, PNAME CHAR(20), PTYPE CHAR(6), BUDGET DECIMAL(9), CITY CHAR(15));

 CREATE TABLE WORKS (EMPNUM CHAR(3) NOT NULL, PNUM CHAR(3) NOT NULL, HOURS DECIMAL(5), UNIQUE(EMPNUM,PNUM));

 CREATE TABLE VTABLE (COL1   INTEGER, COL2   INTEGER, COL3   INTEGER, COL4   INTEGER, COL5   DECIMAL(7,2)); 
 CREATE TABLE UPUNIQ (NUMKEY  DECIMAL(3) NOT NULL UNIQUE, COL2 CHAR(2));

 INSERT INTO STAFF VALUES ('E1','Alice',12,'Deale');
 INSERT INTO STAFF VALUES ('E2','Betty',10,'Vienna');
 INSERT INTO STAFF VALUES ('E3','Carmen',13,'Vienna');
 INSERT INTO STAFF VALUES ('E4','Don',12,'Deale');
 INSERT INTO STAFF VALUES ('E5','Ed',13,'Akron');
 INSERT INTO PROJ VALUES  ('P1','MXSS','Design',10000,'Deale');
 INSERT INTO PROJ VALUES  ('P2','CALM','Code',30000,'Vienna');
 INSERT INTO PROJ VALUES  ('P3','SDP','Test',30000,'Tampa');
 INSERT INTO PROJ VALUES  ('P4','SDP','Design',20000,'Deale');
 INSERT INTO PROJ VALUES  ('P5','IRM','Test',10000,'Vienna');
 INSERT INTO PROJ VALUES  ('P6','PAYR','Design',50000,'Deale');
 INSERT INTO WORKS VALUES  ('E1','P1',40);
 INSERT INTO WORKS VALUES  ('E1','P2',20);
 INSERT INTO WORKS VALUES  ('E1','P3',80);
 INSERT INTO WORKS VALUES  ('E1','P4',20);
 INSERT INTO WORKS VALUES  ('E1','P5',12);
 INSERT INTO WORKS VALUES  ('E1','P6',12);
 INSERT INTO WORKS VALUES  ('E2','P1',40);
 INSERT INTO WORKS VALUES  ('E2','P2',80);
 INSERT INTO WORKS VALUES  ('E3','P2',20);
 INSERT INTO WORKS VALUES  ('E4','P2',20);
 INSERT INTO WORKS VALUES  ('E4','P4',40);
 INSERT INTO WORKS VALUES  ('E4','P5',80);
 INSERT INTO VTABLE VALUES(10,+20,30,40,10.50);
 INSERT INTO VTABLE VALUES(0,1,2,3,4.25);
 INSERT INTO VTABLE VALUES(100,200,300,400,500.01);
 INSERT INTO VTABLE VALUES(1000,-2000,3000,NULL,4000.00);
 INSERT INTO STAFF3 SELECT * FROM STAFF;
 INSERT INTO UPUNIQ VALUES(1,'A');
 INSERT INTO UPUNIQ VALUES(2,'B');
 INSERT INTO UPUNIQ VALUES(3,'C');
 INSERT INTO UPUNIQ VALUES(4,'D');
 INSERT INTO UPUNIQ VALUES(6,'F');
 INSERT INTO UPUNIQ VALUES(8,'H');
COMMIT;

-- TEST:0645 Feature 19, Referential delete actions (static)!

 CREATE TABLE LUSERS ( NAAM CHAR (10), LUSER_ID int not null primary key, FILE_QUOTA INT, FILE_USAGE INT NOT NULL, CHECK (FILE_USAGE >= 0 AND (FILE_QUOTA IS NULL OR FILE_QUOTA >= FILE_USAGE)));
 CREATE TABLE LUSER_DATA ( FILE_NAME     CHAR (8) NOT NULL, LUSER_ID int  NOT NULL  , LUSER_DATA   CHAR (30), primary key (FILE_NAME, LUSER_ID) ,  FOREIGN KEY (LUSER_ID) REFERENCES LUSERS on delete cascade);
 CREATE TABLE AUDIT_CODES ( ACTION_KEY INT not null PRIMARY KEY, LUSER_ACTION CHAR (6) NOT NULL, CHECK (LUSER_ACTION = 'INSERT' OR LUSER_ACTION = 'ACCVIO' OR LUSER_ACTION = 'DELETE'));
 CREATE TABLE ALL_USER_IDS (LUSER_ID INT UNIQUE);
 CREATE TABLE AUDIT_RECORDS ( LUSER_ID INT, SAVED_LUSER_ID INT NOT NULL REFERENCES ALL_USER_IDS (LUSER_ID) ON DELETE NO ACTION, ACTION_KEY INT DEFAULT 0 NOT NULL  REFERENCES AUDIT_CODES ON DELETE SET DEFAULT, FOREIGN KEY (LUSER_ID) REFERENCES LUSERS ON DELETE SET NULL);
 INSERT INTO AUDIT_CODES VALUES (0, 'ACCVIO');
 INSERT INTO AUDIT_CODES VALUES (1, 'INSERT');
 INSERT INTO AUDIT_CODES VALUES (2, 'DELETE');
 INSERT INTO LUSERS VALUES ('root', 0, NULL, 2);
 INSERT INTO LUSERS VALUES ('BIFF', 1, 0, 0);
 INSERT INTO LUSERS VALUES ('Kibo', 2, 1, 1);
 INSERT INTO ALL_USER_IDS VALUES (0);
 INSERT INTO ALL_USER_IDS VALUES (1);
 INSERT INTO ALL_USER_IDS VALUES (2);
 INSERT INTO LUSER_DATA VALUES ('ROOT1', 0, 'BIFF is a total loser');
 INSERT INTO LUSER_DATA VALUES ('ROOT2', 0, 'Kibo wastes disk space');
 INSERT INTO AUDIT_RECORDS VALUES (0, 0, 1);
 INSERT INTO AUDIT_RECORDS VALUES (0, 0, 1);
 INSERT INTO AUDIT_RECORDS VALUES (2, 2, 1);
 INSERT INTO AUDIT_RECORDS VALUES (1, 1, 0);
 INSERT INTO AUDIT_RECORDS VALUES (1, 1, 0);
 INSERT INTO AUDIT_RECORDS VALUES (1, 1, 0);
 INSERT INTO AUDIT_RECORDS VALUES (1, 1, 0);
 INSERT INTO AUDIT_RECORDS VALUES (1, 1, 0);
 INSERT INTO AUDIT_RECORDS VALUES (1, 1, 0);
 INSERT INTO AUDIT_RECORDS VALUES (2, 2, 0);
 INSERT INTO AUDIT_RECORDS VALUES (2, 2, 2);
 INSERT INTO AUDIT_RECORDS VALUES (2, 2, 1);
 INSERT INTO LUSER_DATA VALUES ('HAHA', 2, 'I G0T KIB0Z PASSW0RD!!!');

 DELETE FROM LUSERS WHERE NAAM <> 'root';
 SELECT COUNT(*) FROM LUSER_DATA;

       COUNT 
============ 
           2 

-- PASS:0645 If count = 2?

 SELECT COUNT(*) FROM LUSERS;

       COUNT 
============ 
           1 

-- PASS:0645 If count = 1?

 SELECT COUNT(*) FROM AUDIT_RECORDS;

       COUNT 
============ 
          12 

-- PASS:0645 If count = 12?

 SELECT COUNT(*) FROM AUDIT_RECORDS WHERE LUSER_ID IS NULL;

       COUNT 
============ 
          10 

-- PASS:0645 If count = 10?

 SELECT COUNT(*) FROM AUDIT_RECORDS WHERE SAVED_LUSER_ID IS NULL;

       COUNT 
============ 
           0 

-- PASS:0645 If count = 0?

 DELETE FROM AUDIT_CODES WHERE LUSER_ACTION = 'DELETE';
-- PASS:0645 If 1 row is deleted?

 SELECT COUNT(*) FROM AUDIT_RECORDS WHERE ACTION_KEY = 2;

       COUNT 
============ 
           0 

-- PASS:0645 If count = 0?

 SELECT COUNT(*) FROM AUDIT_RECORDS WHERE ACTION_KEY = 0;

       COUNT 
============ 
           8 

-- PASS:0645 If count = 8?

 DELETE FROM ALL_USER_IDS;
Statement failed, SQLCODE = -530
violation of FOREIGN KEY constraint "INTEG_30" on table "AUDIT_RECORDS"
After line 61 in file ddl/nist/dml117.sql
	-- PASS:0645 If RI ERROR, children exist, 0 rows deleted?

COMMIT;

 DROP TABLE AUDIT_RECORDS ;
-- PASS:0645 If table is dropped?

 DROP TABLE ALL_USER_IDS ;
-- PASS:0645 If table is dropped?

 DROP TABLE AUDIT_CODES ;
-- PASS:0645 If table is dropped?

 DROP TABLE LUSER_DATA ;
-- PASS:0645 If table is dropped?

DROP TABLE LUSERS ;
-- PASS:0645 If table is dropped?

DROP DATABASE;
