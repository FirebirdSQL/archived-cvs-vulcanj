SET NAMES ASCII;
CREATE DATABASE 'test.fdb' DEFAULT CHARACTER SET ISO8859_1;

INPUT ddl/input/base-tab.sql;
COMMIT WORK;

-- TEST:0497 SQLSTATE 22003: data exception/numeric val.range 2!

 CREATE TABLE P1 (NUMTEST  NUMERIC(1));
 CREATE TABLE P7 (NUMTEST  NUMERIC(7));
 CREATE TABLE P12 (NUMTEST  NUMERIC(12));
 CREATE TABLE P15 (NUMTEST  NUMERIC(15));
 CREATE TABLE FOUR_TYPES (T_INT     INTEGER, T_CHAR    CHAR(10), T_DECIMAL DECIMAL(10,2), T_REAL    REAL);
 DELETE FROM P1;
 DELETE FROM FOUR_TYPES;

 INSERT INTO P1 VALUES (100000);
-- PASS:0497 If 1 row is inserted?
-- PASS:0497 OR ERROR, data exception/numeric value out of range?
-- PASS:0497 OR 0 rows inserted OR SQLSTATE = 22003 OR SQLCODE < 0?

 INSERT INTO P1 VALUES (-1000000);
-- PASS:0497 If 1 row is inserted?
-- PASS:0497 OR ERROR, data exception/numeric value out of range?
-- PASS:0497 OR 0 rows inserted OR SQLSTATE = 22003 OR SQLCODE < 0?

 INSERT INTO P1 VALUES (-9);
-- PASS:0497 If 1 row is inserted?

 INSERT INTO P1 VALUES (9);
-- PASS:0497 If 1 row is inserted?

 UPDATE P1 SET NUMTEST = NUMTEST + 100000 WHERE NUMTEST = 9;
--  PASS:0497 If 1 row is updated?
--  PASS:0497 OR ERROR, data exception/numeric value out of range?
--  PASS:0497 OR 0 rows updated OR SQLSTATE = 22003 OR SQLCODE < 0?

 UPDATE P1 SET NUMTEST = ((1 + NUMTEST) * 100000) WHERE NUMTEST = 100009 OR NUMTEST IN (SELECT GRADE - 4 FROM STAFF);
--  PASS:0497 If 1 row is updated?
--  PASS:0497 OR ERROR, data exception/numeric value out of range?
--  PASS:0497 OR 0 rows updated OR SQLSTATE = 22003 OR SQLCODE < 0?

 UPDATE P1 SET NUMTEST = NUMTEST * 200000 WHERE NUMTEST = -9;
--  PASS:0497 If 1 row is updated?
--  PASS:0497 OR ERROR, data exception/numeric value out of range?
--  PASS:0497 OR 0 rows updated OR SQLSTATE = 22003 OR SQLCODE < 0?

 INSERT INTO FOUR_TYPES VALUES (1,'X',11112222.00,.000003E-25);

 SELECT T_DECIMAL / .000000001 FROM FOUR_TYPES WHERE T_CHAR = 'X';
-- PASS:0497 If 1 row is selected and T_DECIMAL = 1.1112222E+16 ?
-- PASS:0497 OR ERROR, data exception/numeric value out of range?
-- PASS:0497 OR 0 rows selected OR SQLSTATE = 22003 OR SQLCODE < 0?

 INSERT INTO FOUR_TYPES (T_REAL) VALUES (-1.555222E+38);
 INSERT INTO FOUR_TYPES (T_REAL) VALUES (-1.555222E+38);
 INSERT INTO FOUR_TYPES (T_REAL) VALUES (-1.555222E+38);
 INSERT INTO FOUR_TYPES (T_REAL) VALUES (-1.555222E+38);
 INSERT INTO FOUR_TYPES (T_REAL) VALUES (-1.555222E+38);
 INSERT INTO FOUR_TYPES (T_REAL) VALUES (-1.555222E+38);
 INSERT INTO FOUR_TYPES (T_REAL) VALUES (-1.555222E+38);
 INSERT INTO FOUR_TYPES (T_REAL) VALUES (-1.555222E+38);
 INSERT INTO FOUR_TYPES (T_REAL) VALUES (-1.555222E+38);
 INSERT INTO FOUR_TYPES (T_REAL) VALUES (-1.555222E+38);
 INSERT INTO FOUR_TYPES (T_REAL) VALUES (-1.555222E+38);
 INSERT INTO FOUR_TYPES (T_REAL) VALUES (-1.555222E+38);
 INSERT INTO FOUR_TYPES (T_REAL) VALUES (-1.555222E+38);
 INSERT INTO FOUR_TYPES (T_REAL) VALUES (-1.555222E+38);
 INSERT INTO FOUR_TYPES (T_REAL) VALUES (-1.555222E+38);
 INSERT INTO FOUR_TYPES (T_REAL) VALUES (-1.555222E+38);

-- NOTE:0497 If we have not inserted enough big values into FOUR_TYPES,
-- NOTE:0497 to cause an ERROR on the SELECT SUM(T_REAL) below, then
-- NOTE:0497 use TEd to enlarge the above values for T_REAL to the
-- NOTE:0497 maximum allowed by your implementation.
-- NOTE:0497 If that is not enough, add more INSERTs.

 SELECT SUM(T_REAL) FROM FOUR_TYPES;
-- PASS:0497 If ERROR, data exception/numeric value out of range?
-- PASS:0497 OR 0 rows selected OR SQLSTATE = 22003 OR SQLCODE < 0?

DROP DATABASE;
